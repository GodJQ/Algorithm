package LeetCode;

import java.util.*;

/**
 * Created by GJQ on 2016/9/8.
 */
public class LC_011_ContainerWithMostWater {
    public int maxAreaTL(int[] height) {
        int maxArea=0;
        for (int i = 0; i < height.length; i++) {
            for (int j = i+1; j < height.length; j++) {
                int area=(j-i)*Math.min(height[i],height[j]);
                if(area>maxArea){
                    maxArea=area;
                }
            }
        }
        return maxArea;
    }

    public int maxAreaWA(int[] height) {
        int maxArea=0;
        for (int i = 0; i < height.length-1; i++) {
            int j=i+1;
            while(j<height.length&&height[j]>=height[i]){
                j++;
            }
            if(j==height.length)j--;
            int area=(j-i)*Math.min(height[i],height[j]);
            if(area>maxArea)maxArea=area;
        }
        return maxArea;
    }

    public int maxArea(int[] height) {
        int max=0,i=0,j=height.length-1;
        while(i<j){
            max=Math.max(max,(j-i)*(height[i]<height[j]?height[i++]:height[j++]));
        }
        return max;
    }

    public int answer(int[] height) {
        int max = 0, i = 0, j = height.length - 1;
        while(i < j){
            max = Math.max(max, (j - i) * (height[i] < height[j] ? height[i++] : height[j--]));
        }
        return max;
    }

}
