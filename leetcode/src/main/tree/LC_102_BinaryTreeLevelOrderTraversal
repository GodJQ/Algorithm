package leetcode.tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class LC_102_BinaryTreeLevelOrderTraversal {
	/*
	 * 问题：将二叉树每一层的数据分别存入一个list
	 * 思路：传统的层次遍历无法识别加入的数据是哪一层的，主要解决这个问题，实现一次对一层的节点进行操作
	 * answer:
	 * 1.层次遍历主要分为一层节点出队，该层的孩子入队，所以只要知道该层有几个节点，每次循环将一层的节点全部出队，下一次循环再将下一层的孩子全部出队，这样就可以一次对每一层的节点进行操作
	 * 2.使用两个队列，将一层放入一个队列，再将该层的子节点放入第二个队列，如此循环
	 */
	
	public List<List<Integer>> levelOrder(TreeNode root) {
		ArrayList result = new ArrayList();
		if (root == null) {
			return result;
		}
		Queue<TreeNode> queue = new LinkedList<TreeNode>();
		queue.offer(root);
		while (!queue.isEmpty()) {
			ArrayList<Integer> list = new ArrayList<Integer>();
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				TreeNode node = queue.poll();
				list.add(node.val);
				if (node.left != null) {
					queue.offer(node.left);
				}
				if (node.right != null) {
					queue.offer(node.right);
				}
			}
			result.add(list);
		}
		return result;
	}
}
