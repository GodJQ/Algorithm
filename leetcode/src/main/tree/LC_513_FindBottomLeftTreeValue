package leetcode.tree;

import java.util.LinkedList;
import java.util.Queue;

public class LC_513_FindBottomLeftTreeValue {
	/*
	 * 思路：将每一层数据放入list中的一个变形，返回最后一层的第一个数据即可
	 */
	public int findBottomLeftValue(TreeNode root) {
		if (root == null) {
			return 0;
		}
		Queue<TreeNode> queue = new LinkedList<TreeNode>();
		queue.add(root);
		int result = root.val;
		while (!queue.isEmpty()) {
			result = queue.peek().val;
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				TreeNode node = queue.poll();
				if (node.left != null) {
					queue.add(node.left);
				}
				if (node.right != null) {
					queue.add(node.right);
				}
			}
		}
		return result;
	}
}
