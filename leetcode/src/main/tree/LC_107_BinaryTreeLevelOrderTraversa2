package leetCode.tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * Created by GJQ on 2016/9/26.
 */
public class LC_107_BinaryTreeLevelOrderTraversa2 {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        LinkedList result=new LinkedList<>();
        if(root==null){
            return result;
        }
        Queue<TreeNode> queue=new LinkedList<TreeNode>();
        queue.offer(root);
        while (!queue.isEmpty()){
            ArrayList<Integer> list=new ArrayList<Integer>();
            int size=queue.size();
            for(int i=0;i<size;i++){
                TreeNode node=queue.poll();
                list.add(node.val);
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            }
            result.add(0,list);
        }
        return result;
    }

    public class Solution {
        public List<List<Integer>> levelOrder(TreeNode root) {
            ArrayList result=new ArrayList<>();
            if(root==null){
                return result;
            }
            Queue<TreeNode> queue=new LinkedList<TreeNode>();
            queue.offer(root);
            while (!queue.isEmpty()){
                ArrayList<Integer> list=new ArrayList<Integer>();
                int size=queue.size();
                for(int i=0;i<queue.size();i++){
                    TreeNode node=queue.poll();
                    list.add(node.val);
                    if(node.left!=null){
                        queue.offer(node.left);
                    }
                    if(node.right!=null){
                        queue.offer(node.right);
                    }
                }
                result.add(list);
            }
            return result;
        }
    }
}
