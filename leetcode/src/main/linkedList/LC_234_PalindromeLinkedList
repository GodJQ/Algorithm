package LeetCode.linkedList;

/**
 * Created by GJQ on 2016/9/19.
 */
public class LC_234_PalindromeLinkedList {
    public boolean isPalindromeTL(ListNode head) {
        if (head==null||head.next==null){
            return true;
        }
        ListNode slower=head;
        ListNode faster=head;
        //找到链表的中点
        while (faster!=null&&faster.next!=null){
            slower=slower.next;
            faster=faster.next.next;
        }
        ListNode node=reverseList(slower);
        while (node!=null){
            if(head.val!=node.val){
                return false;
            }
            node=node.next;
            head=head.next;
        }
        return true;
    }
    public ListNode reverseList(ListNode head){
        if(head==null||head.next==null){
            return head;
        }
        ListNode node=new ListNode(0);
        while (head!=null){
            ListNode temp=new ListNode(head.val);
            temp.next=node.next;
            node.next=temp;
            head=head.next;
        }
        return node.next;
    }
    public boolean isPalindrome(ListNode head) {
        if (head==null||head.next==null){
            return true;
        }
        ListNode node=reverseList(head);
        while (head!=null){
            if(node.val!=head.val){
                return false;
            }
            node=node.next;
            head=head.next;
        }
        return true;
    }
}
